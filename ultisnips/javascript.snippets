
snippet f "anonymous function"
function(${1:argument}) {
	${2:// body...}
};
endsnippet

snippet ff "closure function"
(function(${2:argument}) {
	${3:// body...}
})($1);
endsnippet

snippet ife "if ___ else"
if (${1:true}) {
	$0
} else {

}
endsnippet

snippet if "if"
if (${1:true}) {
	$0
}
endsnippet

snippet switch "switch"
switch(${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet

snippet try "try-catch"
try {
	${1://code}
} catch(ex) {${2}}
endsnippet

snippet log "console log"
console.${1:log}('log:', ${2:1}, ${3}) // debug
endsnippet

snippet defy "define"
define(${1:[
	${2}
], }function(${3:require, exports, module}){
	${4}
});
endsnippet

snippet reqy "require"
require(${1:[
	${2}
], }function(${3:require, exports, module}){
	${4}
});
endsnippet

snippet proto "class"
function ${1:ClassName}(${2:opt}){
	${3}
}

$1.prototype = {

	${7}

};

function exports(${5:$2}){
	return exports.$4(${6:$5});
}

exports.${4:$1} = $1;

return exports;
endsnippet

# vim:ft=snippets:
